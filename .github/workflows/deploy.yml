name: Deploy Invoice Generator

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Create backend .env file
        run: |
          echo "NODE_ENV=test" > backend/.env
          echo "MONGO_URI=mongodb://localhost:27017/invoice_generator_test" >> backend/.env
          echo "JWT_SECRET=test_jwt_secret" >> backend/.env
          echo "JWT_EXPIRE=7d" >> backend/.env

      - name: Run backend tests
        run: |
          cd backend
          npm test

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Run linter
        run: |
          cd frontend
          npm run lint --if-present

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Build application
        run: npm run build

      - name: Build Docker image
        run: docker build -t invoice-generator:${{ github.sha }} .

      # Deploy to Railway (if using Railway)
      - name: Deploy to Railway
        if: github.event_name == 'push'
        uses: railway/cli@v2
        with:
          command: deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      # Deploy to Render (if using Render)
      - name: Deploy to Render
        if: github.event_name == 'push'
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      # Deploy to Heroku (if using Heroku)
      - name: Deploy to Heroku
        if: github.event_name == 'push'
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          dockerfile_directory: .
          dockerfile_name: Dockerfile
          docker_heroku_process_type: web

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/invoice-generator:latest
            ${{ secrets.DOCKER_USERNAME }}/invoice-generator:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
